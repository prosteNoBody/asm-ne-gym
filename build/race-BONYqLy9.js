import{C as _,a as d,b as a}from"./Control-Bpe8c0c8.js";class g extends d{constructor(s){super(),this._calculateActions=s}updateState(s){const t=this._calculateActions(s.sensors);return s.controls.up=t[0]>.5,s.controls.right=t[1]>.5,s.controls.down=t[2]>.5,s.controls.left=t[3]>.5,s}}class p extends a{constructor(s){super({width:5,height:5},s,!0),this._collidingWithWall=!1}render(s){s.fillStyle=this._collidingWithWall?"green":"red",s.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height)}positionUpdate(s){this._pos.x=s.x,this._pos.y=s.y}isColliding(){return this._collidingWithWall?1:0}update(s,t){this._collidingWithWall=!1}collide(s,t){t instanceof c&&(this._collidingWithWall=!0)}}class r extends a{constructor(s){super({width:20,height:20},s,!0),this._sensors=[],this.acc=0,this.vel=0,this.angle=Math.PI/2}render(s){s.fillStyle="blue",s.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height),s.fillStyle="purple",s.fillRect(this._pos.x+this._size.width/2+Math.sin(this.angle)*(this._size.width/2)-2,this._pos.y+this._size.height/2+Math.cos(this.angle)*(this._size.height/2)-2,4,4)}calculateSensorPositions(){const s=[];for(let t=1;t<=3;t++)for(let e=-1;e<=1;e++){const h=Math.PI/6,i=50,l=this._pos.x+this._size.width/2+Math.sin(this.angle+e*h)*t*i-2.5,n=this._pos.y+this._size.height/2+Math.cos(this.angle+e*h)*t*i-2.5;s.push({x:l,y:n})}return s}static{this.MAX_SPEED=9}update(s,t){s.controls.down?this.acc=-.3:s.controls.up?this.acc=.3:this.acc=0,this.vel+=this.acc,this.vel<3?this.vel=3:this.vel>r.MAX_SPEED&&(this.vel=r.MAX_SPEED),s.controls.left&&(this.angle+=Math.PI/4*(.4/this.vel)),s.controls.right&&(this.angle-=Math.PI/4*(.4/this.vel)),this.angle%=Math.PI*2;const e=-2;if(s.score+=this.vel+e,this._pos.x+=this.vel*Math.sin(this.angle),this._pos.y+=this.vel*Math.cos(this.angle),!this._sensors.length){const i=this.calculateSensorPositions();for(let l=0;l<9;l++){const n=new p(i[l]);this._engineCallbacks?.registerEntity(n),this._sensors.push(n)}}s.sensors=this._sensors.map(i=>i.isColliding());const h=this.calculateSensorPositions();this._sensors.forEach((i,l)=>i.positionUpdate(h[l]))}collide(s,t){t instanceof c&&(this.destroy(),this._engineCallbacks?.stopEngine())}}class c extends a{render(s){s.fillStyle="black",s.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height)}update(s,t){}collide(s,t){}}class f extends _{constructor(s,t){const e=new g(t);super(e,i=>{s(i.score)});const h=new r({x:75,y:55});this.registerEntity(h);for(const i of[[0,0,35,900],[35,0,555,35],[555,35,35,110],[555,115,250,35],[800,0,35,150],[835,0,670,35],[35,525,200,35],[35,865,750,35],[1465,35,35,200],[1455,235,35,150],[785,840,150,35],[935,825,150,35],[1050,790,150,35],[1165,755,150,35],[1280,720,150,35],[1300,685,150,35],[1350,650,120,35],[1400,615,80,35],[1445,385,35,150],[1430,535,35,80],[140,130,260,35],[365,165,35,80],[365,245,660,35],[990,145,35,100],[990,110,360,35],[1330,145,35,70],[1300,215,35,70],[1270,285,35,70],[1270,285,35,100],[1240,385,35,100],[1155,485,100,35],[1080,520,100,35],[1e3,555,100,35],[930,590,100,35],[850,625,100,35],[680,660,200,35],[230,695,470,35],[430,350,35,345],[170,315,295,35],[170,165,35,150]]){const l=new c({width:i[2],height:i[3]},{x:i[0],y:i[1]},!0);this.registerEntity(l)}}renderMap(s){s.fillStyle="gray",s.fillRect(0,0,this._sharedState.mapSize.width,this._sharedState.mapSize.height)}getSize(){return this._sharedState.mapSize}initSharedState(){return{score:0,controls:{up:!1,down:!1,left:!1,right:!1},mapSize:{width:1500,height:900},sensors:new Array(9).fill(0)}}}const S=(o,s)=>new Promise(t=>{const e=new f(h=>{t(h)},o);if(s){const h=e.getSize();s.width=h.width,s.height=h.height;const i=s.getContext("2d");i&&e.mount(i)}e.run()});export{S as default};
