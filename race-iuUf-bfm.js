import{C as p,a as d,b as r}from"./Control-Bpe8c0c8.js";class g extends d{constructor(t){super(),this._calculateActions=t}updateState(t){const i=this._calculateActions([...Object.values(t.carData),...t.sensors]);return t.controls.up=i[0]>.5,t.controls.right=i[1]>.5,t.controls.down=i[2]>.5,t.controls.left=i[3]>.5,t}}class f extends r{constructor(t){super({width:10,height:10},t,!0),this._collidingWithWall=!1}render(t){t.fillStyle=this._collidingWithWall?"green":"red",t.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height)}positionUpdate(t){this._pos.x=t.x,this._pos.y=t.y}isColliding(){return this._collidingWithWall?1:0}update(t,i){this._collidingWithWall=!1,this._pos.x<0&&(this._collidingWithWall=!0),this._pos.y<0&&(this._collidingWithWall=!0),this._pos.x>t.mapSize.width&&(this._collidingWithWall=!0),this._pos.y>t.mapSize.height&&(this._collidingWithWall=!0)}collide(t,i){i instanceof a&&(this._collidingWithWall=!0)}}class h extends r{constructor(t){super({width:20,height:20},t,!0),this._sensors=[],this.previous_position={x:this._pos.x,y:this._pos.y},this.active_checkpoint=1,this.acc=0,this.vel=0,this.angle=Math.PI/2}static{this.SENSOR_ROW=3}static{this.SENSOR_COL=3}render(t){t.fillStyle="blue",t.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height),t.fillStyle="purple",t.fillRect(this._pos.x+this._size.width/2+Math.sin(this.angle)*(this._size.width/2)-2,this._pos.y+this._size.height/2+Math.cos(this.angle)*(this._size.height/2)-2,4,4)}calculateSensorPositions(){const t=[];for(let i=1;i<=h.SENSOR_ROW;i++)for(let s=-Math.floor(h.SENSOR_COL/2);s<=Math.floor(h.SENSOR_COL/2);s++){const e=Math.PI/6,o=50,n=this._pos.x+this._size.width/2+Math.sin(this.angle+s*e)*i*o-2.5,l=this._pos.y+this._size.height/2+Math.cos(this.angle+s*e)*i*o-2.5;t.push({x:n,y:l})}return t}static{this.CHECKPOINTS=[{x:100,y:80,reward:800},{x:500,y:150,reward:800},{x:650,y:200,reward:800},{x:900,y:150,reward:800},{x:1150,y:50,reward:800},{x:1350,y:130,reward:800},{x:1350,y:450,reward:800},{x:1150,y:650,reward:800},{x:250,y:800,reward:800},{x:150,y:730,reward:1200},{x:230,y:570,reward:2e3},{x:175,y:475,reward:800},{x:115,y:320,reward:800}]}static{this.MAX_SPEED=9}update(t,i){if(t.controls.down?this.acc=-.3:t.controls.up?this.acc=.3:this.acc=0,this.vel+=this.acc,this.vel<3?this.vel=3:this.vel>h.MAX_SPEED&&(this.vel=h.MAX_SPEED),t.controls.left&&(this.angle+=Math.PI/4*(.4/this.vel)),t.controls.right&&(this.angle-=Math.PI/4*(.4/this.vel)),this.angle%=Math.PI*2,this._pos.x+=this.vel*Math.sin(this.angle),this._pos.y+=this.vel*Math.cos(this.angle),!this._sensors.length){const n=this.calculateSensorPositions();for(let l=0;l<h.SENSOR_COL*h.SENSOR_ROW;l++){const _=new f(n[l]);this._engineCallbacks?.registerEntity(_),this._sensors.push(_)}}t.carData.velocity=this.vel,t.carData.acceleration=this.acc,t.sensors=this._sensors.map(n=>n.isColliding());const s=this.calculateSensorPositions();this._sensors.forEach((n,l)=>n.positionUpdate(s[l])),i%60==0&&(((this._pos.x-this.previous_position.x)**2+(this._pos.y-this.previous_position.y)**2)**.5<200&&(this.destroy(),this._engineCallbacks?.stopEngine()),this.previous_position={x:this._pos.x,y:this._pos.y}),t.score+=this.vel*4;const e=h.CHECKPOINTS[this.active_checkpoint];((this._pos.x-e.x)**2+(this._pos.y-e.y)**2)**(1/2)<=50&&(t.score+=e.reward,this.active_checkpoint=(this.active_checkpoint+1)%h.CHECKPOINTS.length)}collide(t,i){if(i instanceof a){const s=h.CHECKPOINTS[this.active_checkpoint],e=((this._pos.x-s.x)**2+(this._pos.y-s.y)**2)**(1/2);t.score+=s.reward*.1-e,this.destroy(),this._engineCallbacks?.stopEngine()}}}class a extends r{render(t){t.fillStyle="black",t.fillRect(this._pos.x,this._pos.y,this._size.width,this._size.height)}update(t,i){}collide(t,i){}}class y extends p{constructor(t,i){const s=new g(i);super(s,o=>{t(o.score)});const e=new h({x:75,y:80});this.registerEntity(e);for(const o of[[0,0,35,900],[35,0,555,35],[555,35,35,110],[555,115,250,35],[800,0,35,150],[835,0,670,35],[35,525,130,35],[35,865,750,35],[1465,35,35,200],[1455,235,35,150],[785,840,150,35],[935,825,150,35],[1050,790,150,35],[1165,755,150,35],[1280,720,150,35],[1300,685,150,35],[1350,650,120,35],[1400,615,80,35],[1445,385,35,150],[1430,535,35,80],[140,130,260,35],[365,165,35,80],[365,245,660,35],[990,145,35,100],[990,110,300,35],[1270,145,35,70],[1300,215,35,70],[1270,285,35,70],[1270,285,35,100],[1240,385,35,100],[1155,485,100,35],[1080,520,100,35],[1e3,555,100,35],[930,590,100,35],[850,625,100,35],[680,660,200,35],[210,695,470,35],[300,425,35,270],[170,390,295,35],[170,165,35,225]]){const n=new a({width:o[2],height:o[3]},{x:o[0],y:o[1]},!0);this.registerEntity(n)}}updateGame(t,i){i%3e5===0&&this.stop()}renderMap(t){t.fillStyle="gray",t.fillRect(0,0,this._sharedState.mapSize.width,this._sharedState.mapSize.height);const i=this._entities.find(s=>s instanceof h);h.CHECKPOINTS.forEach((s,e)=>{t.fillStyle=e===i?.active_checkpoint?"#e056fd":"#be2edd",t.fillRect(s.x-5,s.y-5,10,10)})}getSize(){return this._sharedState.mapSize}initSharedState(){return{score:0,controls:{up:!1,down:!1,left:!1,right:!1},carData:{velocity:0,acceleration:0},mapSize:{width:1500,height:900},sensors:new Array(h.SENSOR_COL*h.SENSOR_ROW).fill(0)}}}const u=(c,t)=>new Promise(i=>{const s=new y(e=>{i(e)},c);if(t){const e=s.getSize();t.width=e.width,t.height=e.height;const o=t.getContext("2d");o&&s.mount(o)}s.run()});export{u as default};
